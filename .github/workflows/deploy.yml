name: Deploy GO and Nginx to AWS EC2 via ECR
on:
  push:
    branches:
      - GOWithMongoDB  # Test4

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 882142483449.dkr.ecr.us-east-1.amazonaws.com

      - name: Build and Push Go Docker Image
        env:
          ECR_REPOSITORY: homeinsightcore
          IMAGE_TAG: latest
        run: |
          docker build -t homeinsightcore -f Dockerfile .
          docker tag homeinsightcore:latest 882142483449.dkr.ecr.us-east-1.amazonaws.com/homeinsightcore:latest
          docker push 882142483449.dkr.ecr.us-east-1.amazonaws.com/homeinsightcore:latest

      - name: Build and Push Nginx Docker Image
        env:
          ECR_REPOSITORY: homeinsightcore_nginx
          IMAGE_TAG: latest
        run: |
          docker build -t homeinsightcore_nginx -f Dockerfile.nginx .
          docker tag homeinsightcore_nginx:latest 882142483449.dkr.ecr.us-east-1.amazonaws.com/homeinsightcore_nginx:latest
          docker push 882142483449.dkr.ecr.us-east-1.amazonaws.com/homeinsightcore_nginx:latest

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: MONGO_URI,REDIS_HOST,REDIS_PASSWORD,JWT_SECRET
          script: |
            # Ensure Docker service is running
            sudo systemctl start docker
            sudo systemctl enable docker

            # Install Docker Compose if not already installed
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.7/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            # Add ubuntu user to docker group
            sudo usermod -aG docker ubuntu

            # Create deployment directory
            mkdir -p /home/ubuntu/homeinsight
            cd /home/ubuntu/homeinsight

            # Apply group changes without requiring a logout
            newgrp docker << 'EOF'

            # Login to ECR on the EC2 instance
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 882142483449.dkr.ecr.us-east-1.amazonaws.com

            # Pull the latest Go image
            docker pull 882142483449.dkr.ecr.us-east-1.amazonaws.com/homeinsightcore:latest

            # Pull the latest Nginx image
            docker pull 882142483449.dkr.ecr.us-east-1.amazonaws.com/homeinsightcore_nginx:latest

            # Stop and remove existing containers
            docker stop homeinsightcore nginx || true
            docker rm homeinsightcore nginx || true

            # Ensure directories exist
            sudo mkdir -p /var/www/certbot
            sudo chown -R ubuntu:ubuntu /var/www/certbot

            # Create .env file
            cat << 'EOL' > .env
            ENV=development
            MONGO_URI=${MONGO_URI}
            DB_NAME=homeinsight
            REDIS_HOST=${REDIS_HOST}
            REDIS_PORT=6379
            REDIS_PASSWORD=${REDIS_PASSWORD}
            REDIS_DB=0
            REDIS_TLS_ENABLED=true
            SERVER_PORT=8000
            JWT_SECRET=${JWT_SECRET}
            EOL

            # Create docker-compose.yml
            cat << 'EOL' > docker-compose.yml
            version: '3.8'
            services:
              homeinsightcore:
                image: 882142483449.dkr.ecr.us-east-1.amazonaws.com/homeinsightcore:latest
                container_name: homeinsightcore
                networks:
                  - app-network
                ports:
                  - "8000:8000"
                env_file:
                  - .env
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
              nginx:
                image: 882142483449.dkr.ecr.us-east-1.amazonaws.com/homeinsightcore_nginx:latest
                container_name: nginx
                networks:
                  - app-network
                ports:
                  - "80:80"
                volumes:
                  - /var/www/certbot:/var/www/certbot
                depends_on:
                  homeinsightcore:
                    condition: service_healthy
            networks:
              app-network:
                driver: bridge
            EOL

            # Run Docker Compose
            docker-compose up -d
            EOF
