name: Deploy GO and Nginx to AWS EC2 via ECR
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 882142483449.dkr.ecr.us-east-1.amazonaws.com

      - name: Build and Push Go Docker Image
        env:
          ECR_REPOSITORY: homeinsightcore
          IMAGE_TAG: latest
        run: |
          docker build -t homeinsightcore -f Dockerfile .
          docker tag homeinsightcore:latest 882142483449.dkr.ecr.us-east-1.amazonaws.com/homeinsightcore:latest
          docker push 882142483449.dkr.ecr.us-east-1.amazonaws.com/homeinsightcore:latest

      - name: Build and Push Nginx Docker Image
        env:
          ECR_REPOSITORY: homeinsightcore_nginx
          IMAGE_TAG: latest
        run: |
          docker build -t homeinsightcore_nginx -f Dockerfile.nginx .
          docker tag homeinsightcore_nginx:latest 882142483449.dkr.ecr.us-east-1.amazonaws.com/homeinsightcore_nginx:latest
          docker push 882142483449.dkr.ecr.us-east-1.amazonaws.com/homeinsightcore_nginx:latest

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION
          script: |
            # Ensure Docker service is running
            sudo systemctl start docker
            sudo systemctl enable docker

            # Install Docker Compose if not already installed
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.7/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            # Add ubuntu user to docker group
            sudo usermod -aG docker ubuntu

            # Apply group changes without requiring a logout
            newgrp docker << 'EOF'

            # Login to ECR
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 882142483449.dkr.ecr.us-east-1.amazonaws.com

            # Fetch parameters from AWS SSM Parameter Store
            export ENV=$(aws ssm get-parameter --name "/homeinsight/prod/env" --query Parameter.Value --output text)
            export MONGO_URI=$(aws ssm get-parameter --name "/homeinsight/prod/database/uri" --with-decryption --query Parameter.Value --output text)
            export REDIS_HOST=$(aws ssm get-parameter --name "/homeinsight/prod/redis/host" --with-decryption --query Parameter.Value --output text)
            export JWT_SECRET=$(aws ssm get-parameter --name "/homeinsight/prod/jwt/secret" --with-decryption --query Parameter.Value --output text)
            export CORELOGIC_PROXY_URL=$(aws ssm get-parameter --name "/homeinsight/prod/corelogic/proxy-url" --with-decryption --query Parameter.Value --output text)
            export CORELOGIC_DEVELOPER_EMAIL=$(aws ssm get-parameter --name "/homeinsight/prod/corelogic/developer-email" --query Parameter.Value --output text)
            export CORELOGIC_USERNAME=$(aws ssm get-parameter --name "/homeinsight/prod/corelogic/username" --with-decryption --query Parameter.Value --output text)
            export CORELOGIC_PASSWORD=$(aws ssm get-parameter --name "/homeinsight/prod/corelogic/password" --with-decryption --query Parameter.Value --output text)

            # Pull Docker images
            docker pull 882142483449.dkr.ecr.us-east-1.amazonaws.com/homeinsightcore:latest
            docker pull 882142483449.dkr.ecr.us-east-1.amazonaws.com/homeinsightcore_nginx:latest

            # Stop and remove existing containers
            docker stop homeinsightcore nginx || true
            docker rm homeinsightcore nginx || true

            # Ensure volumes exist
            sudo mkdir -p /var/www/certbot
            sudo chown -R ubuntu:ubuntu /var/www/certbot

            # Create docker-compose.yml file
            cat << 'EOL' > docker-compose.yml
            version: '3.8'
            services:
              homeinsightcore:
                image: 882142483449.dkr.ecr.us-east-1.amazonaws.com/homeinsightcore:latest
                container_name: homeinsightcore
                networks:
                  - app-network
                ports:
                  - "8000:8000"
                environment:
                  - ENV=${ENV}
                  - MONGO_URI=${MONGO_URI}
                  - DB_NAME=homeinsight
                  - REDIS_HOST=${REDIS_HOST}
                  - JWT_SECRET=${JWT_SECRET}
                  - CORELOGIC_PROXY_URL=${CORELOGIC_PROXY_URL}
                  - CORELOGIC_DEVELOPER_EMAIL=${CORELOGIC_DEVELOPER_EMAIL}
                  - CORELOGIC_USERNAME=${CORELOGIC_USERNAME}
                  - CORELOGIC_PASSWORD=${CORELOGIC_PASSWORD}
                volumes:
                  - ./config.yaml:/app/config.yaml
              nginx:
                image: 882142483449.dkr.ecr.us-east-1.amazonaws.com/homeinsightcore_nginx:latest
                container_name: nginx
                networks:
                  - app-network
                ports:
                  - "80:80"
                  - "443:443"
                volumes:
                  - /etc/letsencrypt:/etc/letsencrypt
                  - /var/www/certbot:/var/www/certbot
                depends_on:
                  - homeinsightcore
            networks:
              app-network:
                driver: bridge
            EOL

            # Run docker compose
            docker-compose up -d
            EOF
